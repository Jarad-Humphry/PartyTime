import java.util.Arrays;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

public class QuickSort extends RecursiveAction
	{
	private int[] arr;
	private int left;
	private int right;
	private int threshHold;



	public QuickSort (int[] arr, int left, int right, int threshHold)
		{
		this.arr = arr;
		this.left = left;
		this.right = right;
		this.threshHold = threshHold;
		}

	

	@Override
	protected void compute()
		{
		if (right > left)
			/*if (this.right - this.left <= this.threshHold)
				{
				Arrays.sort(arr, this.left, this.right);
				return;
				}
			else*/
				{
				int piv = split(left, right);
				invokeAll(
					new QuickSort(arr, left, piv, this.threshHold),
					new QuickSort(arr, piv + 1, right, this.threshHold) );
				}
		}

	private void swap(int x, int y) 
		{
		int temp = arr[x];
		arr[x] = arr[y];
		arr[y] = temp;
		}
	
	/*private int pivotFinder(int left, int right)
		{
		if (arr.length < 3)
			{
			return arr[0];
			}
		int A = arr[0];
		int B = arr[1];
		int C = arr[arr.length-1];

		if (A > B)
			{
			if (B > C)
				{
				return B;
				}
			else if (A > C)
				{
				return C;
				}
			else 
				{
				return A;
				}
			}
		else
			{
			if (A > C)
				{
				return A;
				} 
			else if (B > C)
				{
				return C;
				}
			else
				{	
				return B;
				}
			}
		
		
		}*/

	public int split(int min, int max)
		{
		

		int left = min - 1;
		int right = max + 1;
		//int piv = pivotFinder(left, right);
		int piv = arr[min];
		whileLoop: while (true)
			{

			
			while (arr[++left] < piv);

			while (arr[--right] > piv);


			
			if (left>=right)
				{
				return right;
				}
			
			swap(left, right);
			
			}
		}

	}
