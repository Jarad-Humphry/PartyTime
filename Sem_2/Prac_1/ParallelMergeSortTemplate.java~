import java.util.Arrays;
import java.util.RecursiveAction;

public class ParallelMergeSort extends RecursiveAction {
	private int[] arr;
    private int start, end;
    private int threshold;

    public ParallelMergeSort(int[] arr, int start, int end, int threshold) {
            this.arr = arr;
            this.start = start;
            this.end = end;
            this.threshold = threshold;
    }

    @Override
    protected void compute() {
            if (end - start <= threshold) {
                    // sequential sort
                    Arrays.sort(arr, start, end);
                    return;
            }

            // Sort halves in parallel
            int mid = start + (end-start) / 2;
            invokeAll(
                    new ParallelMergeSort(arr, start, mid, threshold),
                    new ParallelMergeSort(arr, mid, end, threshold) );

            // sequential merge
            sequentialMerge(mid);
    }

    private void sequentialMerge(int mid) {
         //implement the merge
	int i = this.start;
	int k = mid + 1;
	int[] result = new int[this.end - this.start];	

	while (i != mid && k != this.end)
		{
		if (i <= k)
			{
			result.append(arr[k]);
			 k++;
			}

		else if (i >= k)
			{
			result.append(arr[i]);
			i++;
			}
		}
	
	if (i == mid)
		{
		while (k != this.end)
			{
			result.append(arr[k]);
			k++;
			}
		}

	if (k == this.end)
		{
		while (i != mid)
			{
			result.append(arr[i]);
			i++;
			}
		}
	
	arr = result;
	

	

    }

}
